/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableSignerAccount,
} from '@solana/kit';
import { LEARN_SOLANA_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getTradeTypeDecoder,
  getTradeTypeEncoder,
  type TradeType,
  type TradeTypeArgs,
} from '../types';

export const LOG_TRADE_DISCRIMINATOR = new Uint8Array([
  70, 253, 98, 112, 79, 171, 112, 145,
]);

export function getLogTradeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(LOG_TRADE_DISCRIMINATOR);
}

export type LogTradeInstruction<
  TProgram extends string = typeof LEARN_SOLANA_PROGRAM_PROGRAM_ADDRESS,
  TAccountSigner extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            AccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      ...TRemainingAccounts,
    ]
  >;

export type LogTradeInstructionData = {
  discriminator: ReadonlyUint8Array;
  id: string;
  userId: string;
  fundId: string;
  tradeType: TradeType;
  amount: bigint;
  price: bigint;
  timestamp: bigint;
};

export type LogTradeInstructionDataArgs = {
  id: string;
  userId: string;
  fundId: string;
  tradeType: TradeTypeArgs;
  amount: number | bigint;
  price: number | bigint;
  timestamp: number | bigint;
};

export function getLogTradeInstructionDataEncoder(): Encoder<LogTradeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['id', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['userId', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['fundId', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['tradeType', getTradeTypeEncoder()],
      ['amount', getU64Encoder()],
      ['price', getU64Encoder()],
      ['timestamp', getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: LOG_TRADE_DISCRIMINATOR })
  );
}

export function getLogTradeInstructionDataDecoder(): Decoder<LogTradeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['id', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['userId', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['fundId', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['tradeType', getTradeTypeDecoder()],
    ['amount', getU64Decoder()],
    ['price', getU64Decoder()],
    ['timestamp', getI64Decoder()],
  ]);
}

export function getLogTradeInstructionDataCodec(): Codec<
  LogTradeInstructionDataArgs,
  LogTradeInstructionData
> {
  return combineCodec(
    getLogTradeInstructionDataEncoder(),
    getLogTradeInstructionDataDecoder()
  );
}

export type LogTradeInput<TAccountSigner extends string = string> = {
  signer: TransactionSigner<TAccountSigner>;
  id: LogTradeInstructionDataArgs['id'];
  userId: LogTradeInstructionDataArgs['userId'];
  fundId: LogTradeInstructionDataArgs['fundId'];
  tradeType: LogTradeInstructionDataArgs['tradeType'];
  amount: LogTradeInstructionDataArgs['amount'];
  price: LogTradeInstructionDataArgs['price'];
  timestamp: LogTradeInstructionDataArgs['timestamp'];
};

export function getLogTradeInstruction<
  TAccountSigner extends string,
  TProgramAddress extends Address = typeof LEARN_SOLANA_PROGRAM_PROGRAM_ADDRESS,
>(
  input: LogTradeInput<TAccountSigner>,
  config?: { programAddress?: TProgramAddress }
): LogTradeInstruction<TProgramAddress, TAccountSigner> {
  // Program address.
  const programAddress =
    config?.programAddress ?? LEARN_SOLANA_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [getAccountMeta(accounts.signer)],
    programAddress,
    data: getLogTradeInstructionDataEncoder().encode(
      args as LogTradeInstructionDataArgs
    ),
  } as LogTradeInstruction<TProgramAddress, TAccountSigner>;

  return instruction;
}

export type ParsedLogTradeInstruction<
  TProgram extends string = typeof LEARN_SOLANA_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    signer: TAccountMetas[0];
  };
  data: LogTradeInstructionData;
};

export function parseLogTradeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedLogTradeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 1) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
    },
    data: getLogTradeInstructionDataDecoder().decode(instruction.data),
  };
}
