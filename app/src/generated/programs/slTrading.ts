/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedInitializeInstruction,
  type ParsedLogTradeInstruction,
} from '../instructions';

export const SL_TRADING_PROGRAM_ADDRESS =
  '4qQT9GHrCsd7aNaetC1ei1xfCyJEgksQa4E7eZrUtagG' as Address<'4qQT9GHrCsd7aNaetC1ei1xfCyJEgksQa4E7eZrUtagG'>;

export enum SlTradingInstruction {
  Initialize,
  LogTrade,
}

export function identifySlTradingInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): SlTradingInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([175, 175, 109, 31, 13, 152, 155, 237])
      ),
      0
    )
  ) {
    return SlTradingInstruction.Initialize;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([70, 253, 98, 112, 79, 171, 112, 145])
      ),
      0
    )
  ) {
    return SlTradingInstruction.LogTrade;
  }
  throw new Error(
    'The provided instruction could not be identified as a slTrading instruction.'
  );
}

export type ParsedSlTradingInstruction<
  TProgram extends string = '4qQT9GHrCsd7aNaetC1ei1xfCyJEgksQa4E7eZrUtagG',
> =
  | ({
      instructionType: SlTradingInstruction.Initialize;
    } & ParsedInitializeInstruction<TProgram>)
  | ({
      instructionType: SlTradingInstruction.LogTrade;
    } & ParsedLogTradeInstruction<TProgram>);
